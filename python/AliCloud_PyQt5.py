# -*- coding: utf-8 -*-
# implemented by 李柏峰 2024-09-03
# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import paho.mqtt.client as mqtt # 导入MQTT客户端库
import time # 导入时间模块，用于获取当前时间

# 导入一些常用的库，包括hashlib、hmac、random等
import hashlib
import hmac
import random
# 导入json模块，用于解析JSON数据
import json

# 导入matplotlib库用于绘图
import matplotlib.pyplot as plt
from datetime import datetime

options = {
    'productKey': 'k1own7VPzJY',
    'deviceName': 'PYQT_dev',
    'deviceSecret': '833cf5bfee48f526d67bd5dad2b6d9db',
    'regionId': 'cn-shanghai',
}
# 定义MQTT主机地址和端口号
Host = options['productKey'] + '.iot-as-mqtt.cn-shanghai.aliyuncs.com'
Port = 1883

# 定义发布消息的主题路径
Topic_pub = "/sys/" + options['productKey'] + "/" + options['deviceName'] + "/thing/event/property/post"
# 定义订阅消息的主题路径
Topic_sub = "/sys/" + options['productKey'] + "/" + options['deviceName'] + "/user/get"
# Topic_sub = "/sys/" + options['productKey'] + "/" + options['deviceName'] + "/thing/event/property/set"

ClientID = options['productKey'] + '.' + options['deviceName']
print(ClientID)
# ClientID = 'k1own7VPzJY.PYQT_dev'
# print(ClientID)
Client_Id = ClientID + "|securemode=2,signmethod=hmacsha256,timestamp=1725545011467|"

# 测试JSON字符串
json_str = '{"deviceType":"CustomCategory","iotId":"RBXZ8OPXC9ZaMhOSueI4k1org0","requestId":"1725197141054","checkFailedData":{},"productKey":"k1own7VPzJY","gmtCreate":1725197141083,"deviceName":"THcontrollor","items":{"AC":{"time":1725197141078,"value":1},"Aircleaner":{"time":1725197141078,"value":1},"Relay":{"time":1725197141078,"value":1},"temp":{"time":1725197141078,"value":25},"humi":{"time":1725197141078,"value":50}}}'

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(450, 198)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 50, 131, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 100, 131, 31))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(270, 20, 141, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(270, 70, 141, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(270, 112, 141, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 450, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # MQTT连接阿里云物联网平台
        self.client = mqtt.Client(Client_Id)
        self.get_mqtt_client()
        # 启动MQTT循环
        self.client.loop_start()
        print('======1111111==========')
        # 按钮连接
        self.pushButton.clicked.connect(self.toggle_relay)
        self.pushButton_2.clicked.connect(self.toggle_air_purifier)
        self.pushButton_3.clicked.connect(self.toggle_air_conditioner)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "温度"))
        self.label_2.setText(_translate("MainWindow", "湿度"))
        self.pushButton.setText(_translate("MainWindow", "继电器 开/关"))
        self.pushButton_2.setText(_translate("MainWindow", "空气净化器 开/关"))
        self.pushButton_3.setText(_translate("MainWindow", "空调 开/关"))



    def get_mqtt_client(self):
        # MQTT client setup
        print('=======222222========')
        self.client = self.getAliyunIoTClient()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.connect(Host, Port, 300)
        # self.client.loop_forever()
        return self.client

    def calculation_sign(self):
        data = "".join(("clientId", ClientID, "deviceName", options['deviceName'],
                        "productKey", options['productKey']))
        # ret = hmac.new(bytes(options['deviceSecret'],encoding="utf-8"),bytes(data,encoding="utf-8"),hashlib.sha1).hexdigest()# 正确的hash算法应该是sha256
        ret = hmac.new(bytes(options['deviceSecret'], encoding="utf-8"), bytes(data, encoding="utf-8"),
                       hashlib.sha256).hexdigest()  # 正确的hash算法应该是sha256
        return ret

    def getAliyunIoTClient(self):
        Username = options['deviceName'] + '&' + options['productKey']
        # Password1 = calculation_sign()# 使用计算出的密码，注意函数名别名为calculation_sign，但是注释中使用了hmac.new的名称，应该统一
        # print('Password1=:', Password1)
        Password = 'c3f2c05122126896c0f97d0f162c68368e317075a98145f3fec7bf9865129dfa'
        print('Client_Id=:', Client_Id)
        print('Username=:', Username)
        print('Password=:', Password)
        self.client.username_pw_set(Username, Password)
        return self.client



    # 绘制温湿度随时间变化的折线图
    def plot_data(self, temps, humidities, timestamps):
        plt.ion()
        plt.figure(dpi=128, figsize=(10, 6))
        # plt.plot(timestamps, temps, marker='o', linestyle='-', color='b', label='Temperature')
        # plt.plot(timestamps, humidities, marker='o', linestyle='-', color='g', label='Humidity')
        # plt.title('Temperature and Humidity over Time')
        #
        # plt.xlabel('Time')
        # plt.ylabel('Value')
        # plt.xticks(rotation=45)
        # plt.legend()
        # plt.grid(True)
        # plt.tight_layout()
        # plt.show()

        plt.clf()
        plt.subplot(211)
        plt.plot(timestamps, temps, '-r')
        plt.scatter(timestamps, temps)
        plt.xlabel("recordtime")
        plt.ylabel("tem")
        plt.title("Tem-Time")

        plt.subplot(212)
        plt.plot(timestamps, humidities, '-b')
        plt.scatter(timestamps, humidities)
        plt.xlabel("recordtime")
        plt.ylabel("hum")
        plt.title("Hum-Time")

        plt.subplots_adjust(hspace=0.5)
        plt.pause(5)

    # 定义MQTT连接成功后的回调函数，打印连接结果并订阅主题，同时发布一条消息到指定主题
    def on_connect(self, client, userdata, flags, rc):
        print("Connected with result code " + str(rc))
        print("=======on_connect=======")
        self.client.subscribe(Topic_sub)
        print(Topic_sub)
        # 有效载荷发布qos=？？？？

    def on_message(self, client, userdata, msg):
        print("=======on_message=======")
        print("=====调试JSON串Start======")
        self.parse_json(json_str)
        print("=====调试JSON串End======")

        print("=====解析阿里云实时JSON串Start======")
        print(msg.topic + " " + str(msg.payload))
        self.parse_json(msg.payload.decode())  # 解析收到的JSON数据
        print("=====解析阿里云实时JSON串End======")
        print("++++++++++++++")

    # JSON有效载荷，定义发布消息的payload内容，包括一些随机生成的参数和事件类型
    payload_pub = {
        'id': int(time.time()),
        'params': {
            'humi': 10,
            'temp': 10,
            'Relay': 0,
            'Aircleaner': 0,
            'AC': 0
            # 'humi': random.randint(5, 95),  # 湿度随机生成一个范围在5到95之间的数
            # 'temp': random.randint(-40, 85),  # 温度随机生成一个范围在-40到85之间的数
            # 'Relay': random.randint(0, 1),  # 继电器状态随机生成一个0或1的值
            # 'Aircleaner': random.randint(0, 1),  # 空气净化器状态随机生成一个0或1的值
            # 'AC': random.randint(0, 1)  # 空调状态随机生成一个0或1的值
        },
        'method': "thing.event.property.post"  # 事件类型为发布属性事件
    }

    # 定义一个解析键值对的函数
    def parse_json(self, json_str):
        data = json.loads(json_str)  # 使用json.loads()函数将JSON字符串解析为Python字典

        # 从字典中提取键值对
        temp = data['items']['temp']['value']
        humi = data['items']['humi']['value']
        timestamp = datetime.fromtimestamp(data['items']['temp']['time'] / 1000)  # 提取时间戳并转换为日期时间对象
        # print("Temperature: ", temp)
        # print("Humidity: ", humi)
        print("Temperature:", temp, "at", timestamp)
        print("Humidity:", humi, "at", timestamp)
        self.label.setText(f'温度: {temp} ℃')
        self.label_2.setText(f'湿度: {humi} %')
        # plot_data(temp, humi, timestamp)
        return temp, humi, timestamp

    def toggle_relay(self):
        # 示例函数，发布切换继电器命令
        self.client.publish("topic_relay", payload="toggle", qos=0)
        self.client.publish(Topic_pub, payload=str(self.payload_pub), qos=0)

    def toggle_air_purifier(self):
        # 示例函数，发布切换空气净化器命令
        self.client.publish("topic_air_purifier", payload="toggle", qos=0)
        self.client.publish(Topic_pub, payload=str(self.payload_pub), qos=0)

    def toggle_air_conditioner(self):
        # 示例函数，发布切换空调命令
        self.client.publish("topic_air_conditioner", payload="toggle", qos=0)
        self.client.publish(Topic_pub, payload=str(self.payload_pub), qos=0)

# 程序入口，程序从此处启动PyQt设计的窗体
if __name__ == '__main__':
   app = QtWidgets.QApplication(sys.argv)
   MainWindow = QtWidgets.QMainWindow() # 创建窗体对象
   ui = Ui_MainWindow() # 创建PyQt设计的窗体对象
   ui.setupUi(MainWindow) # 调用PyQt窗体的方法对窗体对象进行初始化设置
   MainWindow.show() # 显示窗体
   sys.exit(app.exec_()) # 程序关闭时退出进程